# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # ! Use the latest stable version of Ubuntu for the box
  config.vm.box = "koalephant/debian12"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # ! Assing a dedicated IP to the eth1 interface
  config.vm.network "private_network", ip: "192.168.56.110"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  # ! Provision VMware with 1 CPU and 512MB of memory
  config.vm.provider "vmware_fusion" do |v|
  # * Set the name of the VM
    config.vm.hostname = "ikgonzalS"
  # * Display the VMWare GUI when booting the machine
    v.vmx["gui"] = "true"
  # * Customize the amount of CPUs on the VM:
    v.vmx["numvcpus"] = "1"
  # * Customize the amount of memory on the VM:
    v.vmx["memsize"] = "512"
  end

  # * Copy deployment, service, and ingress files to the guest machine
  config.vm.provision "shell", inline: <<-SHELL
  mkdir -p /home/vagrant/app1
  mkdir -p /home/vagrant/app2
  mkdir -p /home/vagrant/app3
  SHELL

  config.vm.provision "file", source: "app1/deployment.yaml", destination: "/home/vagrant/app1/deployment.yaml"
  config.vm.provision "file", source: "app1/service.yaml", destination: "/home/vagrant/app1/service.yaml"
  config.vm.provision "file", source: "app1/ingress.yaml", destination: "/home/vagrant/app1/ingress.yaml"
  
  config.vm.provision "file", source: "app2/deployment.yaml", destination: "/home/vagrant/app2/deployment.yaml"
  config.vm.provision "file", source: "app2/service.yaml", destination: "/home/vagrant/app2/service.yaml"
  config.vm.provision "file", source: "app2/ingress.yaml", destination: "/home/vagrant/app2/ingress.yaml"
  
  config.vm.provision "file", source: "app3/deployment.yaml", destination: "/home/vagrant/app3/deployment.yaml"
  config.vm.provision "file", source: "app3/service.yaml", destination: "/home/vagrant/app3/service.yaml"
  config.vm.provision "file", source: "app3/ingress.yaml", destination: "/home/vagrant/app3/ingress.yaml"

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # * Download and install K3s
    curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644

    # * Download and install kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/

    # * Set KUBECONFIG environment variable
    echo "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml" | sudo tee -a /etc/profile
    . ~/.bashrc

    #  * Apply the deployment, service, and ingress files
    kubectl apply -f /home/vagrant/app1/deployment.yaml
    kubectl apply -f /home/vagrant/app1/service.yaml
    kubectl apply -f /home/vagrant/app1/ingress.yaml
  
    kubectl apply -f /home/vagrant/app2/deployment.yaml
    kubectl apply -f /home/vagrant/app2/service.yaml
    kubectl apply -f /home/vagrant/app2/ingress.yaml
  
    kubectl apply -f /home/vagrant/app3/deployment.yaml
    kubectl apply -f /home/vagrant/app3/service.yaml
    kubectl apply -f /home/vagrant/app3/ingress.yaml
  SHELL
end
